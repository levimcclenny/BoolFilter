{
    "collab_server" : "",
    "contents" : "\\name{SIR_BKF}\n\\alias{SIR_BKF}\n\n\\title{\nParticle Filter\n}\n\\description{\nPerforms the SIR-BKF algorithm approach in order to approximate the optimal MMSE estimate of state variables of a Partially-Observed Boolean Dynamical System. \n}\n\\usage{\nSIR_BKF(Y, N, alpha, net, p, obsModel)\n}\n\\arguments{\n\n  \\item{Y}{\nTime series of noisy observations of the boolean regulatory network. \\cr\nEach row and column correspond to a specific Boolean variable and time point respectively.\n}\n  \\item{N}{\nNumber of particles used in approximation\n}\n  \\item{alpha}{\nParameter denoting the cutoff threshold for resampling\n}\n  \\item{net}{\nA Boolean Network object (specified in BoolNet vernacular) that the time series of observations presented in \\code{Y} is based on\n}\n  \\item{p}{\nIntensity of Bernoulli process noise\n}\n\\item{obsModel}{\nParameters for the chosen observation model.\\cr\n}\n}\n\\details{\nExact optimal state estimation for partially-observed Boolean dynamical systems may become impractical computationally if system dimensionality is large. This opens the floor for an approximation algorithm to handle cases of high-dimensional systems. The SIR-BKF Particle Filtering algorithm contained in BoolFilter handles situations in which the Boolean Kalman Filter proves too computationally inefficient. \n\nThe Particle Filtering approximation, like the Boolean Kalman Filter, can handle various observation models, including Bernoulli, Gaussian, Poisson, and Negative-Binomial, based on the input to the \\code{obsModel} paramter. \n\nThe obsModel parameter is defined the same as the \\code{Boolean Kalman Filter} and \\code{simulateNetwork} functions, reference the documentation for \\cite{\\link{BKF}} or \\cite{\\link{simulateNetwork}} for details.\n}\n\\source{\nBraga-Neto U. Particle filtering approach to state estimation in Boolean dynamical systems. In Global Conference on Signal and Information Processing (GlobalSIP), 2013 IEEE 2013 Dec 3 (pp. 81-84). IEEE.\n\n}\n\\examples{\n\\donttest{\ndata(cellcycle)\n\nobsModel = list(type = 'Gaussian', \n               model = c(mu0 = 1, sigma0 = 2, mu1 = 5, sigma1 = 2))\n\n#generate data from Negative Binomial observation model for the\n#10-gene Mammalian Cell Cycle Network\ndata <- simulateNetwork(cellcycle, n.data = 100, p = 0.02, obsModel)\n\n#perform SIR-BKF algorithm\napprox <- SIR_BKF(data$Y, N = 1000, alpha = 0.95, cellcycle, p = 0.02, obsModel)\n                                          \n}                                        \n\n}\n\n",
    "created" : 1483912865479.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4212037182",
    "id" : "D52BB95C",
    "lastKnownWriteTime" : 1483913192,
    "last_content_update" : 1483913192191,
    "path" : "C:/Users/Levi/Dropbox/BoolFilter/man/SIR_BKF.Rd",
    "project_path" : "man/SIR_BKF.Rd",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_doc"
}