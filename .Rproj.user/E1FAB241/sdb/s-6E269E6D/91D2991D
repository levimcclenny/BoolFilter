{
    "collab_server" : "",
    "contents" : "\\name{BKF}\n\\alias{BKF}\n\\title{\nBoolean Kalman Filter\n}\n\\description{\nImplements the Boolean Kalman Filter to derive the optimal MMSE estimate of state of a Partially Observed Boolean Dynamical System\n}\n\\usage{\nBKF(Y, net, p, obsModel)\n}\n\\arguments{\n  \\item{Y}{\nTime series of noisy observations of the Boolean regulatory network. \\cr\nEach row and column correspond to a specific Boolean variable and time point respectively.\n}\n  \\item{net}{\nA Boolean Network object (specified in BoolNet vernacular) that the time series of observations presented in \\code{Y} is based on\n}\n  \\item{p}{\nIntensity of Bernoulli process noise\n}\n\\item{obsModel}{\nParameters for the chosen observation model.\\cr\n}\n}\n\\details{\nA novel state-space signal model has been proposed for stochastic Boolean dynamical systems observed through noisy measurements, of which the Boolean Kalman Filter is the optimal MMSE estimator. State evolution is governed by Boolean functions (i.e. logic gates) and noise. The current system state, in which transitions between Boolean states can be perturbed by some process noise, creating an ergodic state transition matrix, is observed through an arbitrary noisy measurement. The optimal recursive MMSE estimator for this model is called the Boolean Kalman Filter (BKF), and an efficient algorithm has been proposed for its exact computation. This algorithm is presented here.\n\nThe Boolean Kalman Filtering algorithm can handle various observation models, including Bernoulli, Gaussian, Poisson, and Negative-Binomial, based on the input to the \\code{obsModel} parameters. \n\n\\itemize{\n\\item{Bernoulli observation model requires only one parameter, aside from declaring the type, e.g. \\cr \\cr\n\\code{obsModel = list(type = 'Bernoulli', q = 0.05)}}\n\\cr\n\n\\item {Gaussian observation model requires a vector of the observation parameters, which include the mean and standard deviation of Boolean variables in inactivated and activated states. This will be defined as a vector, e.g. \\cr \\cr\n\\code{mu0 = 1} \\cr\n\\code{sigma0 = 2}\\cr\n\\code{mu1 = 5}\\cr\n\\code{sigma1 = 2}\\cr\n\\code{obsModel = list(type = 'Gaussian', model = c(mu0, sigma0, mu1, sigma1))}}\n\\cr\n\n\\item{The Poisson observation model requires a list of parameters. This list will have 3 entries in addition to the type definition, for a total of 4 entries:\n\\itemize{\n\\item{Sequencing depth \\code{s}}\n\\item{Baseline espression in inactivated state, referred to as \\code{mu}}\n\\item{The differential expression, referred to as \\code{delta}, which must be input as a vector of the same length as the number of Boolean variables in the network.}\n}\n\nIn this way, the user can define the exact observation parameter for each individual gene. For a 4-gene network, a potential \\code{obsModel} parameter for a Poisson distribution could be defined as:\\cr \\cr\n\\code{obsModel = list(type = 'Poisson', s = 10.875, mu = 0.01, delta = c(2, 2, 2, 2))}}\n\\cr\n\\item{\nNegative-Binomial observation model also requires a list of parameters. This list will have 4 entries in addition to the type definition, for a total of 5 entries:\n\\itemize{\n\\item{Sequencing depth \\code{s}}\n\\item{Baseline espression in inactivated state, referred to as \\code{mu}}\n\\item{Differential expression, referred to as \\code{delta},  which must be input as a vector of the same length as the number of Boolean variables in the network.}\n\\item{Inverse Dispersion, referred to as \\code{phi}, which must also be input as a vector of the same length as the number of Boolean variables in the network.}\n}\nFor a 4-gene network, a potential \\code{obsModel} parameter for a Negative-Binomial observation model could be defined as:\\cr \\cr\n\\code{delta = c(2, 2, 2, 2)} \\cr\n\\code{phi = c(3, 3, 3, 3)} \\cr\n\\code{obsModel = list(type = 'NB', s = 10.875, mu = 0.01, delta, phi)}}\n\\cr\n}\n}\n\\value{\n\\item{Xhat}{Estimate the state of of the Partially-Observed Boolean Dynamical System based on the recursive BKF algorithm}\n\\item{MSE}{Mean Squared Error of the estimate returned by the BKF algorithm for each time instance}\n\\item{Beta}{Normalized PDV for each time instance}\n}\n\\source{\nBraga-Neto, U. (2011, November). Optimal state estimation for Boolean dynamical systems. In Signals, Systems and Computers (ASILOMAR), 2011 Conference Record of the Forty Fifth Asilomar Conference on (pp. 1050-1054). IEEE.\nImani, M., & Braga-Neto, U. Maximum-likelihood adaptive filter for partially-observed boolean dynamical systems. IEEE transaction on Signal Processing, 65:359-371, 2017.\n}\n\\examples{\ndata(p53net_DNAdsb0)\n\nobsModel = list(type = 'NB', \n                   s = 10.875, \n                  mu = 0.01, \n               delta = c(2, 2, 2, 2), \n                 phi = c(3, 3, 3, 3))\n\n#Simulate a network with Negative-Binomial observation model\ndata <- simulateNetwork(p53net_DNAdsb0, n.data = 100, p = 0.02, obsModel)\n          \n#Derive the optimal estimate of the network using a BKF approach\nResults <- BKF(data$Y, p53net_DNAdsb0, p = 0.02, obsModel)\n\n}",
    "created" : 1483896227666.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1079672108",
    "id" : "91D2991D",
    "lastKnownWriteTime" : 1483896265,
    "last_content_update" : 1483896265151,
    "path" : "C:/Users/Levi/Dropbox/BoolFilter/man/BKF.Rd",
    "project_path" : "man/BKF.Rd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_doc"
}