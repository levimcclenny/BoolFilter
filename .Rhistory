phi = c(rep(3,10))))
plotTrajectory(PFdata$originalState[1:4,],
labels = cellcycle$genes[1:4],
dataset2 = approx$Estimate[1:4,],
compare = TRUE)
data <- simulateNetwork(p53net_DNAdsb0, 100, .02,
obsModel = list(type = 'NB',
s = 10.875,
mu = 0.01,
delta = c(rep(2,4)),
phi = c(rep(3,4)))
)
NetworkEstimate <- BKF(data$observation, p53net_DNAdsb0, .02,
obsModel = list(type = 'NB',
s = 10.875,
mu = 0.01,
delta = c(rep(2,4)),
phi = c(rep(3,4)))
)
PFdata <- simulateNetwork(cellcycle, 100, .02,
obsModel = list(type = 'NB',
s = 10.875,
mu = 0.01,
delta = c(rep(2,4)),
phi = c(rep(3,4))))
PFdata <- simulateNetwork(cellcycle, 100, .02,
obsModel = list(type = 'NB',
s = 10.875,
mu = 0.01,
delta = c(rep(2,10)),
phi = c(rep(3,10))))
approx <- particleFilter(PFdata$observation, 1000, .95, cellcycle, .02,
obsModel = list(type = 'NB',
s = 10.875,
mu = 0.01,
delta = c(rep(2,10)),
phi = c(rep(3,10))))
data <- simulateNetwork(p53net_DNAdsb1, 100, .02,
obsModel = list(type = 'Bernoullli',
q = 0.05)
plotTrajectory(data$originalState,
labels = p53net_DNAdsb1$genes)
data <- simulateNetwork(p53net_DNAdsb1, 100, .02,
obsModel = list(type = 'Bernoullli',
q = 0.05))
data <- simulateNetwork(p53net_DNAdsb1, 100, .02,
obsModel = list(type = 'Bernoulli',
q = 0.05))
plotTrajectory(data$originalState,
labels = p53net_DNAdsb1$genes)
#View both (noiseless and noisy) datasets overlayed
plotTrajectory(data$originalState,
labels = p53net_DNAdsb1$genes,
dataset2 = data$observation,
compare = TRUE)
system("R CMD Rd2pdf .”)
system("R CMD Rd2pdf .”)
)
system("R CMD Rd2pdf .”)
system("R CMD Rd2pdf .")
detach("package:BoolFilter", unload=TRUE)
install.packages('~/Dropbox/BoolFilter_1.0.tar.gz', repos = NULL)
install.packages('~/Dropbox/BoolFilter_1.0.tgz', repos = NULL)
remove.packages("BoolFilter")
install.packages('~/Dropbox/BoolFilter_1.0.tgz', repos = NULL)
library("BoolFilter", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
remove.packages("BoolFilter")
install.packages('~/Dropbox/BoolFilter_1.0.tgz', repos = NULL, type = 'source')
remove.packages("BoolFilter")
install.packages('~/Dropbox/BoolFilter_1.0.tar.gz', repos = NULL, type = 'source')
install.packages("~/Dropbox/BoolFilter_1.0.tar.gz",repos=NULL, type = 'source')
remove.packages("BoolFilter")
install.packages("~/Dropbox/BoolFilter_1.0.tar.gz",repos=NULL, type = 'source')
remove.packages("BoolFilter")
remove.packages("BoolNet")
install.packages("~/Dropbox/BoolFilter_1.0.tar.gz",repos=NULL, type = 'source')
install.packages("~/Dropbox/BoolFilter_1.0.tar.gz", type = 'source')
install.packages("~/Dropbox/BoolFilter_1.0.tar.gz", repos=NULL, type = 'source', dependencies = TRUE)
library(BoolFilter)
depth <- 10.875baseline <- 0.01diff <- c(3, 4, 5, 6)inv <- c(5, 6, 7, 8)obsModel <- list(type = 'NB', s = depth, mu = baseline, delta = diff, phi = inv) > data <- simulateNetwork(p53net_DNAdsb1, 100, .02,                                                                                                             + obsModel)
depth <- 10.875baseline <- 0.01diff <- c(3, 4, 5, 6)inv <- c(5, 6, 7, 8)obsModel <- list(type = 'NB', s = depth, mu = baseline, delta = diff, phi = inv) > data <- simulateNetwork(p53net_DNAdsb1, 100, .02,                                                                                                             + obsModel)
depth <- 10.875
baseline <- 0.01
diff <- c(3, 4, 5, 6)
inv <- c(5, 6, 7, 8)
obsModel <- list(type = 'NB', s = depth, mu = baseline, delta = diff, phi = inv)
data <- simulateNetwork(p53net_DNAdsb1, 100, .02, obsModel)
plotTrajectories(data$Observation)
plotTrajectory(data$Observation)
data$observation
plotTrajectory(data$observation)
?plotTrajectory
plotTrajectory(data$observation, labels = p53net_DNAdsb1$genes)
data <- simulateNetwork(p53net_DNAdsb1, 100, .02, obsModel)
obsModel <- list(type = 'Poisson', s = 10.875, mu = 0.01 , delta = c(3,4,5,6)
data <- simulateNetwork(p53net_DNAdsb1, 100, .02, obsModel)
plotTrajectory(data$observation, labels = p53net_DNAdsb1$genes)
obsModel <- list(type = 'Poisson', s = 10.875, mu = 0.01 , delta = c(3,4,5,6))
data <- simulateNetwork(p53net_DNAdsb1, 100, .02, obsModel)
plotTrajectory(data$observation, labels = p53net_DNAdsb1$genes)
obsModel <- list(type = 'Poisson', s = 10.875, mu = 0.01 , delta = c(3,4,5,6))
data <- simulateNetwork(p53net_DNAdsb1, 100, .02, obsModel)
plotTrajectory(data$observation, labels = p53net_DNAdsb1$genes)
data <- simulateNetwork(p53net_DNAdbs1, T = 100, .02,
obsModel = list(type = 'Bernoulli',
q = 0.05))
data <- simulateNetwork(p53net_DNAdbs1, n.data = 100, .02,
obsModel = list(type = 'Bernoulli',
q = 0.05))
data <- simulateNetwork(p53net_DNAdsb1, n.data = 100, .02,
obsModel = list(type = 'Bernoulli',
q = 0.05))
data <- simulateNetwork(p53net_DNAdsb1, n.data = 100, p = .02,
obsModel = list(type = 'Bernoulli',
q = 0.05))
@
data <- simulateNetwork(p53net_DNAdsb1, n.data = 100, p = .02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
data <- simulateNetwork(p53net_DNAdsb1, n.data = 100, p = .02,
obsModel = list(type = 'Bernoulli',
q = 0.02))
Results <- BKF(data$observation, p53net_DNAdsb1, .02,
obsModel = list(type = 'Bernoulli',
q = 0.02))
plotTrajectory(data$originalState,
labels = p53net_DNAdsb1$genes,
dataset2 = Results$Estimate,
compare = TRUE)
Results <- BKS(dataBKS$observation, p53net_DNAdsb1, p = .02,
obsModel = list(type = 'Bernoulli',
q = 0.05))
data(cellcycle)
data <- simulateNetwork(cellcycle, n.data = 100, p = .02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
data
Results <- SIR_BKF(data$observation, 1000, .9, cellcycle, .02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
Results
VarPlot=c(1,2,5,7)
plotTrajectory(datadata$originalState[VarPlot,],
labels = cellcycle$genes[VarPlot],
dataset2 = Results$Estimate[VarPlot,],
compare = TRUE)
VarPlot=c(1,2,5,7)
plotTrajectory(data$originalState[VarPlot,],
labels = cellcycle$genes[VarPlot],
dataset2 = Results$Estimate[VarPlot,],
compare = TRUE)
plotTrajectory <- function(dataset1, labels = NA,  dataset2 = NA, compare = FALSE, byrow = TRUE){
if(!is.numeric(dataset1)) {stop('Input is not numeric')}
if(!byrow) {
dataset1 <- t(dataset1)
}
if(nrow(dataset1) > 4) {stop('Number of trajectories is greater than 4. Reduce the number of gene trajectories to be plotted to continue.')}
par(mfrow = c(nrow(dataset1),1), mar = c(2.5,2.5,2.5,2.5))
if(!compare) {
for (i in 1:nrow(dataset1)) {
plot(dataset1[i,], type = 's', col = 'black',lwd = 2, cex.axis = 1.5, main = labels[i])
axis(2, c(0,1), cex.axis = 1.5)
#lines(data$originalX[,1], type = 's', col = 'black')
box(pch = 30)
}
}
else if(compare) {
if (!any(is.numeric(dataset2))) {stop('A second (numeric) dataset must be input to compare!')}
for (i in 1:nrow(dataset1)) {
plot(dataset1[i,], type = 's', col = 'black',lwd = 2, cex.axis = 1.5, main = labels[i])
lines(dataset2[i,], type = 's', col = 'red',lwd = 2, lty = 2, cex.axis = 1.5)
axis(2, c(0,1), cex.axis = 1.5)
#lines(data$originalX[,1], type = 's', col = 'black')
box(pch = 30)
}
}
}
VarPlot=c(1,2,5,7)
plotTrajectory(data$originalState[VarPlot,],
labels = cellcycle$genes[VarPlot],
dataset2 = Results$Estimate[VarPlot,],
compare = TRUE)
data$originalState[VarPlot,]
plotTrajectory <- function(dataset1, labels = NA,  dataset2 = NA, compare = FALSE, byrow = TRUE){
if(!is.numeric(dataset1)) {stop('Input is not numeric')}
if(!byrow) {
dataset1 <- t(dataset1)
}
if(nrow(dataset1) > 4) {stop('Number of trajectories is greater than 4. Reduce the number of gene trajectories to be plotted to continue.')}
par(mfrow = c(nrow(dataset1),1), mar = c(2.5,2.5,2.5,2.5))
if(!compare) {
for (i in 1:nrow(dataset1)) {
plot(dataset1[i,], type = 's', col = 'black',lwd = 2, cex.axis = 1.5, yaxt = 'n', main = labels[i])
axis(2, c(0,1), cex.axis = 1.5)
#lines(data$originalX[,1], type = 's', col = 'black')
box(pch = 30)
}
}
else if(compare) {
if (!any(is.numeric(dataset2))) {stop('A second (numeric) dataset must be input to compare!')}
for (i in 1:nrow(dataset1)) {
plot(dataset1[i,], type = 's', col = 'black',lwd = 2, cex.axis = 1.5, yaxt = 'n', main = labels[i])
lines(dataset2[i,], type = 's', col = 'red',lwd = 2, lty = 2, cex.axis = 1.5)
axis(2, c(0,1), cex.axis = 1.5)
#lines(data$originalX[,1], type = 's', col = 'black')
box(pch = 30)
}
}
}
data$originalState[VarPlot,]
plotTrajectory <- function(dataset1, labels = NA,  dataset2 = NA, compare = FALSE, byrow = TRUE){
if(!is.numeric(dataset1)) {stop('Input is not numeric')}
if(!byrow) {
dataset1 <- t(dataset1)
}
if(nrow(dataset1) > 4) {stop('Number of trajectories is greater than 4. Reduce the number of gene trajectories to be plotted to continue.')}
par(mfrow = c(nrow(dataset1),1), mar = c(2.5,2.5,2.5,2.5))
if(!compare) {
for (i in 1:nrow(dataset1)) {
plot(dataset1[i,], type = 's', col = 'black',lwd = 2, cex.axis = 1.5, yaxt = 'n', main = labels[i])
axis(2, c(0,1), cex.axis = 1.5)
#lines(data$originalX[,1], type = 's', col = 'black')
box(pch = 30)
}
}
else if(compare) {
if (!any(is.numeric(dataset2))) {stop('A second (numeric) dataset must be input to compare!')}
for (i in 1:nrow(dataset1)) {
plot(dataset1[i,], type = 's', col = 'black',lwd = 2, cex.axis = 1.5, yaxt = 'n', main = labels[i])
lines(dataset2[i,], type = 's', col = 'red',lwd = 2, lty = 2, cex.axis = 1.5)
axis(2, c(0,1), cex.axis = 1.5)
#lines(data$originalX[,1], type = 's', col = 'black')
box(pch = 30)
}
}
}
data$originalState[VarPlot,]
data$originalState[VarPlot,]
VarPlot=c(1,2,5,7)
plotTrajectory(data$originalState[VarPlot,],
labels = cellcycle$genes[VarPlot],
dataset2 = Results$Estimate[VarPlot,],
compare = TRUE)
max
max(data$originalState[VarPlot,])
plotTrajectory <- function(dataset1, labels = NA,  dataset2 = NA, compare = FALSE, byrow = TRUE){
if(!is.numeric(dataset1)) {stop('Input is not numeric')}
if(!byrow) {
dataset1 <- t(dataset1)
}
if(nrow(dataset1) > 4) {stop('Number of trajectories is greater than 4. Reduce the number of gene trajectories to be plotted to continue.')}
par(mfrow = c(nrow(dataset1),1), mar = c(2.5,2.5,2.5,2.5))
if(!compare) {
for (i in 1:nrow(dataset1)) {
plot(dataset1[i,], type = 's', col = 'black',lwd = 2, cex.axis = 1.5, yaxt = 'n', main = labels[i])
axis(2, c(0,max(dataset1[i,])), cex.axis = 1.5)
#lines(data$originalX[,1], type = 's', col = 'black')
box(pch = 30)
}
}
else if(compare) {
if (!any(is.numeric(dataset2))) {stop('A second (numeric) dataset must be input to compare!')}
for (i in 1:nrow(dataset1)) {
plot(dataset1[i,], type = 's', col = 'black',lwd = 2, cex.axis = 1.5, yaxt = 'n', main = labels[i])
lines(dataset2[i,], type = 's', col = 'red',lwd = 2, lty = 2, cex.axis = 1.5)
axis(2, c(0, max(dataset1[i,])), cex.axis = 1.5)
#lines(data$originalX[,1], type = 's', col = 'black')
box(pch = 30)
}
}
}
max(data$originalState[VarPlot,])
VarPlot=c(1,2,5,7)
plotTrajectory(data$originalState[VarPlot,],
labels = cellcycle$genes[VarPlot],
dataset2 = Results$Estimate[VarPlot,],
compare = TRUE)
VarPlot=c(1,2,5,7)
plotTrajectory(data$observation[VarPlot,],
labels = cellcycle$genes[VarPlot],
dataset2 = Results$Estimate[VarPlot,],
compare = TRUE)
Results <- SIR_BKF(data$observation, N = 1000, alpha = .9, cellcycle, p = 0.02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
data(p53net_DNAdsb0)
#Simulate a network with addative Bernoulli observation noise
data <- simulateNetwork(p53net_DNAdsb0, n.data = 100, p = 0.02,
obsModel = list(type = 'Bernoulli',
q = 0.02))
#Derive an estimate of the network using a BKS approach
NetworkEstimate <- BKS(data$observation, p53net_DNAdsb0, p = 0.02,
obsModel = list(type = 'Bernoulli',
q = 0.02))
NetworkEstimate
data(cellcycle)
#Generate addative Negative Binomial noise for the
#10-gene Mammalian Cell Cycle Network
data <- simulateNetwork(cellcycle, n.data = 100, p = .02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
#Generate Particle Filter approximation
approx <- SIR_BKF(PFdata$observation, 1000, .95, cellcycle, .02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
data(cellcycle)
#Generate addative Negative Binomial noise for the
#10-gene Mammalian Cell Cycle Network
data <- simulateNetwork(cellcycle, n.data = 100, p = .02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
#Generate Particle Filter approximation
approx <- SIR_BKF(PFdata$observation, 1000, .95, cellcycle, .02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
data(cellcycle)
data <- simulateNetwork(cellcycle, n.data = 100, p = .02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
Results <- SIR_BKF(data$observation, N = 1000, alpha = .9, cellcycle, p = 0.02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
data(cellcycle)
#Generate addative Negative Binomial noise for the
#10-gene Mammalian Cell Cycle Network
data <- simulateNetwork(cellcycle, n.data = 100, p = .02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
#Generate Particle Filter approximation
approx <- SIR_BKF(data$observation, N = 1000, aplha = .95, cellcycle, .02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
data(cellcycle)
#Generate addative Negative Binomial noise for the
#10-gene Mammalian Cell Cycle Network
data <- simulateNetwork(cellcycle, n.data = 100, p = .02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
#Generate Particle Filter approximation
approx <- SIR_BKF(data$observation, N = 1000, alpha = .95, cellcycle, .02,
obsModel = list(type = 'Gaussian',
model = c(mu0 = 1, sigma0 = 1, mu1 = 5, sigma1 = 1)))
data(p53net_DNAdsb0)
#Simulate a network with Negative-Binomial observation model
data <- simulateNetwork(p53net_DNAdsb0, 100, .02,
obsModel = list(type = 'NB',
s = 10.875,
mu = 0.01,
delta = c(2, 2, 2, 2),
phi = c(3, 3, 3, 3)))
#Derive an estimate of the network using a BKF approach
NetworkEstimate <- BKF(data$observation, p53net_DNAdsb0, .02,
obsModel = list(type = 'NB',
s = 10.875,
mu = 0.01,
delta = c(2, 2, 2, 2),
phi = c(3, 3, 3, 3)))
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
MMAE(data, net = c("net1","net2"), p = c(0.02,0.1,0.15), threshold = 0.8,
prior = NA,
obsModel = observation)
library("BoolFilter", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
MMAE(data, net = c("net1","net2"), p = c(0.02,0.1,0.15), threshold = 0.8,
prior = NA,
obsModel = observation)
observation = list(type = 'NB',
s = 10.875,
mu = 0.01,
delta = c(2, 2, 2, 2),
phi = c(3, 3, 3, 3))
#simulate data using one of the networks and a given 'p'
data <- simulateNetwork(net1, n.data = 100, p = 0.02, obsModel = observation)
data(p53net_DNAdsb0)
data(p53net_DNAdsb1)
net1 <- p53net_DNAdsb0
net2 <- p53net_DNAdsb1
observation = list(type = 'NB',
s = 10.875,
mu = 0.01,
delta = c(2, 2, 2, 2),
phi = c(3, 3, 3, 3))
#simulate data using one of the networks and a given 'p'
data <- simulateNetwork(net1, n.data = 100, p = 0.02, obsModel = observation)
MMAE(data, net = c("net1","net2"), p = c(0.02,0.1,0.15), threshold = 0.8,
prior = NA,
obsModel = observation)
MMAE(data, net = c("net1","net2"), p = c(0.02,0.1,0.15), threshold = 0.8,
Prior = NA,
obsModel = observation)
system("R CMD Rd2pdf .")
data <- simulateNetwork(p53net_DNAdsb1, n.data = 100, p = .02,
obsModel = list(type = 'Bernoulli',
q = 0.05))
plotTrajectory(data$originalState,
labels = p53net_DNAdsb1$genes,
dataset2 = data$observation,
compare = TRUE)
data <- simulateNetwork(p53net_DNAdsb1, n.data = 100, p = .02,
obsModel = list(type = 'Bernoulli',
q = 0.02))
Results <- BKF(data$observation, p53net_DNAdsb1, .02,
obsModel = list(type = 'Bernoulli',
q = 0.02))
plotTrajectory(data$originalState,
labels = p53net_DNAdsb1$genes,
dataset2 = Results$Estimate,
compare = TRUE)
data(p53net_DNAdsb0)
data(p53net_DNAdsb1)
net1 <- p53net_DNAdsb0
net2 <- p53net_DNAdsb1
observation = list(type = 'NB',
s = 10.875,
mu = 0.01,
delta = c(2, 2, 2, 2),
phi = c(3, 3, 3, 3))
data <- simulateNetwork(net1, n.data = 100, p = 0.02, obsModel = observation)
MMAE(data, net = c("net1","net2"), p = c(0.02,0.1,0.15), threshold = 0.8,
Prior = NA,
obsModel = observation)
MMAE(data$observation, net = c("net1","net2"), p = c(0.02,0.1,0.15), threshold = 0.8,
Prior = NA,
obsModel = observation)
system("R CMD Rd2pdf .")
?tools::undoc
undoc("BoolFilter")
tools::undoc('BoolFilter')
tools::Rdindex()
tools::Rdindex('BoolFilter')
library(BoolFilter)
library(BoolFilter)
system()
system("R CMD build")
system("R CMD build")
install.packages('testthat')
system("R CMD Rd2pdf .')
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
system("R CMD Rd2pdf .")
install.packages(c('Rlab', "BoolNet"))
install.packages("BoolNet")
install.packages(c('Rlab', "BoolNet"))
install.packages(c('Rlab', "BoolNet"))
install.packages('BoolNet')
install.packages('BoolNet')
library("BoolNet", lib.loc="~/R/win-library/3.2")
?texi2dvi
system('R CMD check package --no-manual')
system('R CMD check BoolFilter --no-manual')
system('R CMD check')
system('R CMD check BoolFilter')
system('R CMD INSTALL BoolFilter_1.0.tar.gz')
system('R CMD INSTALL BoolFilter_1.0.tar.gz')
library(BoolFilter)
system('R CMD BUILD BoolFilter_1.0.tar.gz')
system('R CMD CHECK BoolFilter_1.0.tar.gz')
system('R CMD check BoolFilter_1.0.tar.gz')
library(BoolFilter)
library(BoolFilter)
install.packages('rmarkdown')
devtools::use_readme_rmd()
library('devtools')
install.packages('devtools')
devtools::use_readme_rmd()
devtools::use_readme_rmd('BoolFilter')
devtools::use_readme_rmd('C:\Users\Levi\Dropbox\BoolFilter')
?use_readme_rmd
?use_readme_rmd
devtools::use_readme_rmd(as.package('C:\Users\Levi\Dropbox\BoolFilter'))
devtools::use_readme_rmd(as.package(C:\Users\Levi\Dropbox\BoolFilter))
devtools::use_readme_rmd(C:\Users\Levi\Dropbox\BoolFilter)
setwd("C:/Users/Levi/Dropbox/BoolFilter")
devtools::use_readme_rmdC:\Users\Levi\Dropbox\BoolFilter)
devtools::use_readme_rmd()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README-"
)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
install.packages(c('BoolNet','Rlab', 'devtools'))
Sys.which(Sys.getenv("R_QPDF", "qpdf.exe"))
Sys.getenv("PATH")
system('R CMD check --as-cran')
system('R CMD check')
?check
system('R CMD check --as-cran BoolFilter')
system('R CMD check --as-cran BoolFilter')
library(BoolFilter)
system('R CMD check --as-cran BoolFilter')
system('R CMD check --as-cran C:/Users/Levi/Dropbox/BoolFilter_1.0.tar.gz')
